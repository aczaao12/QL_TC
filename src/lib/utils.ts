// src/lib/utils.ts

// Emoji g·ª£i √Ω theo category
const CATEGORY_ICONS: Record<string, string> = {
  "ƒÇn u·ªëng": "üçî",
  "ƒÇn s√°ng": "ü•ê",
  "ƒêi l·∫°i": "üöó",
  "Kh√°c": "üîñ",
  "N∆∞·ªõc u·ªëng": "ü•§",
  "default": "üí∏"
};

function getCategoryIcon(category: string): string {
  return CATEGORY_ICONS[category] || CATEGORY_ICONS["default"];
}

/**
 * Format m·∫∑c ƒë·ªãnh: li·ªát k√™ t·ª´ng kho·∫£n + t·ªïng c·ªông
 */
export function formatTransactions(data: any[]): string {
  if (!data || data.length === 0) return "Kh√¥ng c√≥ d·ªØ li·ªáu.";

  let total = 0;
  let lines = data.map(item => {
    if (typeof item.amount === "number") total += item.amount;

    const name = item.name || "Kh√¥ng t√™n";
    const amount = typeof item.amount === "number" ? item.amount.toLocaleString() : "N/A";
    const category = item.category || "Kh√¥ng r√µ";
    const date = item.date || "Kh√¥ng ng√†y";
    const icon = getCategoryIcon(category);

    return `${icon} ${name}: ${amount}ƒë (${category}, ${date})`;
  });

  return lines.join("\n") + `\nüëâ T·ªïng c·ªông: ${total.toLocaleString()}ƒë`;
}

/**
 * Format ng·∫Øn g·ªçn: ch·ªâ t√™n + s·ªë ti·ªÅn
 */
export function formatTransactionsShort(data: any[]): string {
  if (!data || data.length === 0) return "Kh√¥ng c√≥ d·ªØ li·ªáu.";

  let total = 0;
  let lines = data.map(item => {
    if (typeof item.amount === "number") total += item.amount;

    const name = item.name || "Kh√¥ng t√™n";
    const amount = typeof item.amount === "number" ? item.amount.toLocaleString() : "N/A";
    return `- ${name}: ${amount}ƒë`;
  });

  return lines.join("\n") + `\nüëâ T·ªïng c·ªông: ${total.toLocaleString()}ƒë`;
}

/**
 * Format b·∫£ng Markdown: c√≥ th·ªÉ render ƒë·∫πp trong chat (n·∫øu b·∫°n x√†i markdown renderer)
 */
export function formatTransactionsTable(data: any[]): string {
  if (!data || data.length === 0) return "Kh√¥ng c√≥ d·ªØ li·ªáu.";

  let total = 0;
  let rows = data.map(item => {
    if (typeof item.amount === "number") total += item.amount;

    const name = item.name || "Kh√¥ng t√™n";
    const amount = typeof item.amount === "number" ? item.amount.toLocaleString() : "N/A";
    const category = item.category || "Kh√¥ng r√µ";
    const date = item.date || "Kh√¥ng ng√†y";
    return `| ${name} | ${amount}ƒë | ${category} | ${date} |`;
  });

  return (
    `| T√™n | S·ªë ti·ªÅn | Lo·∫°i | Ng√†y |\n` +
    `| --- | --- | --- | --- |\n` +
    rows.join("\n") +
    `\n| üëâ T·ªïng c·ªông | ${total.toLocaleString()}ƒë |  |  |`
  );
}

/**
 * Format k·∫øt qu·∫£ aggregate (sum, avg, max, min, count)
 */
export function formatAggregateResult(operation: string, field: string, result: any): string {
  if (result === undefined || result === null) {
    return `Kh√¥ng c√≥ k·∫øt qu·∫£ cho ph√©p t√≠nh ${operation} tr√™n tr∆∞·ªùng ${field}.`;
  }

  let formattedResult = result.toLocaleString();
  if (field === "amount" && ["sum", "avg", "max", "min"].includes(operation)) {
    formattedResult += "ƒë";
  }

  switch (operation) {
    case "sum": return `T·ªïng ${field}: ${formattedResult}`;
    case "avg": return `Trung b√¨nh ${field}: ${formattedResult}`;
    case "max": return `L·ªõn nh·∫•t ${field}: ${formattedResult}`;
    case "min": return `Nh·ªè nh·∫•t ${field}: ${formattedResult}`;
    case "count": return `S·ªë l∆∞·ª£ng ${field}: ${formattedResult}`;
    default: return `K·∫øt qu·∫£ ${operation} ${field}: ${formattedResult}`;
  }
}
